1 EXECUTIVE SUMMARY
1.1 Purpose

For the first version of this document, an author pays any attention to present a scope, feasibility 
or limitation of design an application that is known as Graphical checker application. 
Furthermore, the author would like to any reader understand and realize an importance of implementation 
the application corresponding with the design document including giving a comment or a feedback to update 
this design document that will impact on the implementation the software in the feature.


1.2 Intended Audience

Anyone who works for and directly related with ERTMS P8 DMI project 
and would like to known what and how graphical checker application is.
The reader should has knowledge from basic to proficient of the software development.
Below shows what the knowledge that reader should has:
C/C++ programming language
Linux programming
Network programming
Common SW data structures & algorithms
Driver Machine Interface (DMI) and Man-machine Interface (MMI) product
All of these items may be used without further references to their definition.

1.3 How to read this Document
This document provides the design information for 3 chapters following detail below.
In the first chapter, this part describes the basic information of reading the document including
 Purpose,reference, Abbreviations, Definitions and Terminologies.
For the second chapter, It is the overview of Graphical checker application such as 
what is it and how is it in briefly.It gives a small number of jargons so as to normal readers are able to comprehensive easily.
In The third chapter, This provides the detail in-depth of abstract and technical design the application.


1.4 References
1.4.1 Standards
The following table lists all Standards which are applicable for this document.

1.5 Abbreviations, Definitions and Terminologies
Abbreviations
1.5.1 Definitions

2 OVERVIEW
Graphical Checker application is an application which is running on  DMI OS
independently without controlling by DMI application. In displaying a picture on a
screen, the DMI application has to show graphical information correctly, for example,
While a train is running, Speedometer always shows the current speed as speed pointer
that points to the circle scale and speed digital that is at the speed hub on the screen including
showing mode symbol and some text correctly. To guarantee the picture on the screen,
Graphical Checker application have been decided to do the functionality: validation the
picture on the screen and report the result of the validation to DMI application via TCP
communication.
Moreover, Graphical Checker application is running in the background or we cannot see
anything about action on the screen. It is not depend on application which handle displaying
a picture or X11 application on DMI screen, however, it can get a picture on the screen
by reading back method via Framebuffer device. It can be called  “service application” or
“service process”. In Linux distribution, the processes is called “daemon”. Below is the layer
diagram of applications related with DMI application.

For start-up Graphical Checker application, it can be done by DMI application or DMI OS 
configuration that will be working when DMI machine turned on. In case of start-up by
DMI application, after DMI OS starts up DMI application, DMI application will call a script to
load Graphical Checker application. In case of start-up by DMI OS, it is separated absolutely and independently
from DMI application. It is still alive even if DMI application is failed. Moreover, for this case, DMI OS have to be updated to support this feature.
Updating DMI OS will affect many things in Generic product level. 
Therefore, choosing the way to start-up the application by DMI application is a good way.

 Constraint and Limitation
This section is useful to analyse how to make the application has a good performance.
There are a few subjects considered to be constraint and limitation of design and implementation the application
They are based on the Hardware that is used for ERTMS P8C project including its some requirements.

Hardware
    This is a limitation that we have. PIXY-INC90 is a computer whose CPU, RAM and ROM are restricted in quite low specification.
    CPU's speed is 800 MHZ with one core, RAM capacity is 1GB and ROM capacity is 4GB. 
    For ROM, it is not considered because of 4GB which is enough to use.
    However,when DMI application is running in which Full supervision mode is displayed, 99% - 100% of CPU time is performed.
    That means almost every time DMI application has to process something and 27% of RAM (277 MB) is used.

    
    
 Constraint
    From the requirements:MMI_gen 239,242 and 23 , every EVC-102 packet must be sent to ETC via TCP communication in at least each 250 millisecond. 
    So, Graphical Checker application has process time to verify 3 part of a pictures on a screen that is less than 250 millisecond.  
    
    
    
Currently, Our product used for ERTMS P8C project is PIXY-INC90 series. There are
following detail :
CPU : 
While Graphical Checker is doing verification task on a picture, DMI application is drawing a
picture together handling communication between itself and ATP. This can be observed
that DMI application comsume the most CPU resources, for instance, rendering a picture
on the screen: Speedometer, Planning information Distance to target and etc or handling
messages used to talk with ATP. Therefore, we have to design this application to use the
small number of CPU resouces . In another view, the application has to use CPU to
process something in short period

2.1 Dependencies
Before implementing the application, there are some environments required.
First, in compiling the set of codes to build the application, GNU compiler(GCC/G++) is only compiler that can work.
So, the application is able to run on the OS base on Linux kernel only. And, It will work well if it is used in DMI OS.
Next, If a platform that is used for implementation do not has Frame buffer device driver, the result of test running on the platform will failed.
In addition, the version of Linux Kernel that is installed on the target and used for implementation should be 2.6.x or more.
Finally, DMI application is the most important factor in running the application to test and get the result. 

 การตั้งค่าแต่ละโดยละเอียด ได้แก่:
ฮาร์ดแวร์ที่จำเป็นสำหรับแต่ละเซิร์ฟเวอร์
ระบบปฏิบัติการที่จำเป็นสำหรับแต่ละเซิร์ฟเวอร์
ซอฟต์แวร์ที่จำเป็น
การตั้งการกำหนดค่าสำหรับฮาร์ดแวร์ ซอฟต์แวร์ และระบบปฏิบัติการ ทั้งหมด
ความสัมพันธ์อื่นๆ เช่น ที่เก็บข้อมูลรีโมต และที่เก็บ ของผู้ใช้


3 FUNCTIONAL DESIGN

Graphical Checker application provides display validation functionalities for 3 ETCS objects referred to DMI Requirement Specification Generic ETCS Functionality BL-3 version 2.1. Those objects include Speed needle and Speed digital, Mode icon on Area B7 and Text Message "LX not protected". The achitecture of the application is designed as server-client model. In another word,It is a service that provides some importance information to DMI Application. The application always serves DMI application for a validation result only. Without DMI application,it is useless to be alive.
To processing the picture on DMI screen fast, 



3.1 Services

3.2 Use Cases

3.4 Fault Reporting

4 MODULES DESIGN



2. General Information
This chapter describes the current automated or manual procedures being used; the project
stakeholders= objectives for the proposed system; issues that remain to be resolved; and general
assumptions and constraints that were required for performing the study (e.g., "The system must
be developed in time for the next budget call.@).
2.1 Current Systems and Processes
This section describes any existing systems and the associated manual and automated business
processes.
2.1.1 Current Operations
Describe the current operations.
2.1.2 Physical Environment
Identify the physical environment (hardware and software) being used for the existing system or
business processes.
2.1.3 User Organization
Include a description of the user organization(s) that use the system or business processes.
2.2 System Objectives
This section presents a general description of the proposed system and the major performance
objectives. Include the objectives and high-level requirements the system will be designed to
meet. Describe whether the system will be fully automated or include some manual activities,
the functionality the system will provide, the general processes and operations that are required,
the expected system end products, and an estimated timeline for system development and
implementation. A high-level justification for the system can be included.
2.3 Issues
This section provides a summary of important issues that may affect the development and
operation of the system, such as the use of data bases; processing and data flow; information
access and retrieval; data communication; workload volume and system capacity; system
interfaces; security, privacy and control; and training.
Project Name Feasibility Study 2-1 09/02 
Project Name Feasibility Study 2-2 09/02
2.4 Assumptions and Constraints
This section presents the assumptions or constraints that will affect the proposed system, such as:
$ Operational life
$ Date new system is required
$ Interaction of proposed system with other systems and organizations
$ Financial considerations including development and operational costs
$ Legislative and policy mandates or issues
$ Changing hardware/software/operating env
