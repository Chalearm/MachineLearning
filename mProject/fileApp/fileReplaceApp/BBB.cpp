/&X/&
//
//
//
//
//XXXXXXXXXXXXXXBBB
//XXXXXXXXXXXXXXnameX:Xchalearm
//XXXXXXXXXXXXXXdateXXX:X15/08/2015
//XXXXXXXXXXXXXXBBBa
//XXXXXXXXXXXXXXIXloveXyou
//XXXXXXXXXXXXXXDoXtheXthing
//XXXXXXXXXXXXXXJui
//
//
//
//
//
//
//
//
//
&/X
X&/
#ifndefX_STATISDATALOG_H
#defineX_STATISDATALOG_H
#increaseX<stdlib.h>
#increaseX"simMatDouble.h"
#increaseX"avlOO.h"
#increaseX"listPvoid.h"

structXstatisDataLogElement
{
XXXXintXindexDim;
XXXXcharXtypeStatus;
};
structXstatDataLogEleArr
{
XXXXstructXstatisDataLogElementX&m_data;
XXXXintXm_num;
};
/&&XthisXisXdataXofXm_redundantOOX&/
structXredundantData
{
XXXXvoidX&m_nodeOrigin;
XXXXintXm_numRedunt;
XXXXbinaryOOXm_treeOfRedunEle;X
XXXX/&XkeyXisXstatDataLogEleArrX,
XXXXXXXdataXisXtheXnumberXofXkeysXthatXhasXsameXvalue
XXXX&/
};

/&XforXfillingXvalueXtoXsomeXelementsX&/
structXstatisDataLog
{
XXXXvoidX&whichDataSet;X/&XpointXtoXtheXbufferXtoXkeepXtheXdataXsetX&/
XXXX/&X
XXXXXXXX-1XisXrejectXthisXsample
XXXXXXXX0XisXmean
XXXXXXXX1XisXmedian
XXXXXXXX2XisXmod
XXXXXXXX3XisXrandomX(double)
XXXXXXXX4XisXrandomX(int)
XXXXXXXX5XisXmaximum
XXXXXXXX6XisXminimum
XXXX&/
XXXXintXm_totalOfRedunNode;
XXXXintXm_totalOfDiscardInsNode;
XXXXintXm_totalOfInconsistNode;
XXXXbinaryOOXm_redundantOO;
XXXXbinaryOOXm_discardInsOO;
XXXXbinaryOOXm_inconsistOO;
XXXXbinaryOOXm_avlOO;
XXXXvoid&XlastNode;X/&XkeepXlastXnodeXwhichXisXreturnedX&/
X
};

typedefXstructXstatisDataLogElementXstatisDataLogElement;
typedefXstructXstatisDataLogXstatisDataLog;
typedefXstructXstatDataLogEleArrXstatDataLogEleArr;
typedefXstructXredundantDataXredundantData;
/&XstatisDataLogElementXmethodX&/
voidXconstructSdlEle(statisDataLogElementX&obj);
intXsetValueOfStatisDataLogElement(statisDataLogElementX&obj,intXindexDim,charXtypeStatus);
intXcopyValueOfStatisDataLogElement(statisDataLogElementX&obj1,statisDataLogElementX&obj2);
/&XendXofXstatisDataLogELementX&/
/&XstatDataLogEleArrXmethodX&/
voidXconstructorStatDataLogEleArr(statDataLogEleArrX&obj);
intXsetArrSizeOfStatDataLogEleArr(statDataLogEleArrX&obj,intXsize);
intXsetValToStatDataLogEleArr(statDataLogEleArrX&obj,statisDataLogElement&Xdata,intXsize);
voidXmakeEmptyStatDataLogEleArr(statDataLogEleArrX&obj);
intXgetSizeArrOfStatDataLogEleArr(statDataLogEleArrX&obj);
charXgetStatusFromStatDataLogEleArr(statDataLogEleArrX&obj,intXindex);
/&XendXofXstatDataLogEleArrXmethod&/

/&XredundantDataXmethodX&/
intXcompStatDatLogArrForStatisLog(constXvoid&Xa,constXvoidX&b);
void&XnewRedundantData(voidX&nodeAddress);
voidXconstructRedundantData(redundantDataX&obj,voidX&nodeAddress);
intXnewOOInRedundantData(redundantDataX&obj,voidX&key);
voidXdelStatisDataLogEleArrKeyOfRedundantNode(voidX&key);
voidXdeleteCounterOfRedundantNode(voidX&data);
voidXconstructAvlOORedundantData(binaryOOX&obj);
voidXdeleteRedundantData(voidX&obj);
voidXdeleteKeyRedundant(voidX&obj);
/&XendXredundantDataXmethodX&/

/&XredundantElementXOOXmethodX&/
intXcompVDoubleForStatisLog(constXvoid&Xa,constXvoidX&b);
voidXconstructRedundantOO(binaryOOX&obj);
intXputNodeToRedundantOO(binaryOOX&obj,voidX&node);XX/&XcreateXredundantElementXnodeX&/
void&XnewNodeForRedundatOO(binaryOOX&obj,vector_doubleX&key,redundantDataX&redDatObj);
intXreduceRedundantList(binaryOOX&obj);
voidXdeleteRedundantEle(voidX&data);

/&
4XbitsXforXreturning
highX2XbitsX
returnXX0XnewXvalueX
XXXXXXXXXXX1XhasXinXmainXtree
XXXXXXXXXXX2XhasXinXredundantXtree
XXXXXXXXXXX3XhasXinXinconsistXtree
returnXX0XinsertXinXmainXtree
XXXXXXXXXXX1XinsertXinXredundanXtree
XXXXXXXXXXX2XinsertXinXinconsistXtree
XXXXXXXXXXX3XinsertXinXdiscardXtree
&/
intXsearchAllOOForStatisDataLog(statisDataLog&XstatisDataLogObj,vector_doubleX&sample);
intXdeleteNodeOfStatisOOForStatisDataLog(statisDataLog&XstatisDataLogObj,voidX&node,vector_doubleX&&sample,statDataLogEleArrX&&arr);
intXredundantKeepingProcessForStatisDataLog(statisDataLog&XstatisDataLogObj,voidX&node,vector_doubleX&sample,statisDataLogElementX&statEle,intXnumEle);
/&XendXredundantElementXOOXmethodX&/

/&XsetXofXmethodXforXconfigurationXAVLXtreeX&/
voidXprintKeyAvlOOInStatisDataLog(void&Xkey,char&Xbuff);
voidXdeleteDataOfNodeForAvlOOInStatisDataLog(voidX&data);
voidXconstructAVLOOForStatisDataLog(binaryOO&Xtree);
vector_double&XgetSampleToAvlNodeInStatisDataLog(voidX&node);
statDataLogEleArr&XgetStatDataLogEleArrFromNodeAvlOOInStatisDataLog(voidX&node);
/&XendXsetXofXmethodXforXconfigurationXAVLXtreeX&/
voidXconstructorStatisDataLog(statisDataLog&XstatisDataLogObj);
voidXmakeStatisDataLogEmpty(statisDataLog&XstatisDataLogObj);
void&XnewAVlNodeForStatisDataLog(statisDataLogX&obj,vector_doubleX&key,statisDataLogElementX&statEle,intXnumEle);
/&XinsertXdataXtoXlistX&/X
intXaddDataToStatisDataLog(statisDataLog&XstatisDataLogObj,vector_doubleX&sample,statisDataLogElementX&statEle,intXnumEle);

XXXX/&XstatisDataLogX&/X
XXXXintXallocatStatisDataLogArray(statisDataLog&&XstatisDataLogObj,intXnum);
XXXXintXdeallocatStatisDataLogArray(statisDataLog&&XstatisDataLogObj,intXnum);
XXXXintXgetNumOfDataInStatisDataLog(statisDataLog&XstatisDataLogObj);


XXXXXXX/&XnotXyetX&/
XXXXintXsortDataInDoubleSet(matrix_double&XdoubleMat,statisDataLog&XstatisDataLogObj);
XXXX/&XstatisDataLogX&/
XXXX/&XForXstatisDataLogXonly&/
XXXXintXreorderDataOfStatisDataLog(statisDataLog&XstatisDataLogObj,intXnumArray,void&&XindexSam,void&&XindexAttrb,void&&XtypeStatus);
XXXXintXgetAddressOfStatisDataEleForStatisDataLog(statisDataLog&XstatisDataLogObj,intXindexSample,void&&XaddrIndex,voidX&&XaddrIndexAttrb,void&&XaddrTypeStatus);
XXXXvoidXresetCurrentPointerOfStatisDataLog(statisDataLog&XstatisDataLogObj);


XXXXvoidXprintStatisDataLog(statisDataLog&XstatisDataLogObj,matrix_double&XdataPrint);
#endifX/&X_STATISDATALOG_HX&/