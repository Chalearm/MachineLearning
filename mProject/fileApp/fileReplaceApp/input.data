#include "avlTree.h"
/* ABA */
int deleteNodeAvlNodeWithNoData(binaryTree* avlTree,void** node) /* %1 */
{
    int res =0;/* %1 %2 %3 aaa */
    nodeBinaryPVoidWithData** p = (nodeBinaryPVoidWithData**)node;
    char fact1 = (avlTree!=NULL)&&(node !=NULL);/* %3 */
    if(fact1 ==1)
    {
        fact1 = (*node !=NULL); /*%1*/
    }
    else
    {
        /* do nothing */
    }
    if(fact1 ==1)/* %2 */
    {
        if(((*p)->key !=NULL)&&(avlTree->deleteKey!=NULL)) /* %1 */
        { 
            avlTree->deleteKey(&((*p)->key));
        }
        else
        {
            /* do nothing */
        }
        if(avlTree->deleteData!=NULL)/* %2 */
        {
            avlTree->deleteData(&((*p)->data));
        }
        else
        {
            /* do nothing */
        }
        free(*node);
        res =1;
        *node = NULL;
    }
    else
    {
        /* do nothing */
    }
    return res;
}
int deleteNodeAvlNodeWithData(binaryTree* avlTree,void** node) /* %1 */
{
    int res =0;/* %2 */
    char fact1 = (avlTree!=NULL)&&(node !=NULL);
    nodeBinaryPVoidWithData** p =(nodeBinaryPVoidWithData**)node;
    if(fact1 ==1)
    {
        fact1 = (*node !=NULL);
    }
    else
    {
        /* do nothing */
    }
    if(fact1 ==1)
    {
        if(((*p)->key !=NULL)&&(avlTree->deleteKey!=NULL)) /* %1 aaa*/
        { 
            avlTree->deleteKey(&((*p)->key));
        }
        else
        {/* %3 */
            /* do nothing */
        }
        if((avlTree->deleteData!=NULL)&&((*p)->data!=NULL))/* %3 aaa*/
        {
            deleteAvlDataStruct(avlTree,*node);
            free((*p)->data);
        }
        else
        {
            /* do nothing */
        }
        free(*node);
        res =1;
        *node = NULL;
    }
    else
    {
        /* do nothing */
    }
    return res;
}
void clearANodeAvlTree(binaryTree* avlTree,void* node)
{ /* %3 */
    if(node != NULL)
    {   
        clearANodeAvlTree(avlTree,avlTree->getNodeLeft(node));
        clearANodeAvlTree(avlTree,avlTree->getNodeRight(node));
        deleteNodeAvlNodeWithNoData(avlTree,&node);
    }
    else
    {
        /* do nothing */
    }
}
void clearANodeAvlTreeWithData(binaryTree* avlTree,void* node)/* %3 aaa*/
{
    if(node != NULL)
    { 
        clearANodeAvlTreeWithData(avlTree,avlTree->getNodeLeft(node));
        clearANodeAvlTreeWithData(avlTree,avlTree->getNodeRight(node));
        deleteNodeAvlNodeWithData(avlTree,&node);
    }
    else
    {/* %3 */
        /* do nothing */
    }
}
int validateConfigIsOk(binaryTree* avlTree)
{
    int res = (avlTree!=NULL);
    if(res==1)
    {
        res = res&&(avlTree->compareType!=NULL); 
    }
    else
    {
        res =0;
    }
    return res;
}

void deleteAvlDataStruct(binaryTree* avlTree,void *node)
{/* %3 */
    char fact1 = (avlTree !=NULL)&&(node!=NULL);
    avlData *p =NULL;
    if(fact1 ==1)
    {
        p = ((nodeBinaryPVoidWithData*)node)->data;
        fact1 = (p->data!=NULL)&&(avlTree->deleteData!=NULL);
        if(fact1==1)
        {
            avlTree->deleteData(&(p->data));
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
}
void constructAvlTree(binaryTree* avlTree,char isWithData,const char* KeyTypeConfig,int sizeData,int sizeKey)
{/* %3 */
    char fact1 = (avlTree!=NULL);
    if(fact1 ==1)
    {
        constructorBinaryTree3(avlTree,"custom type 2",sizeData,sizeKey);
       // setFunctionOfBinaryTree(avlTree);
        avlTree->isData = (isWithData==1); 
        /* isWithData==0 , data = height */
        if(avlTree->isData==0)
        {
            avlTree->deleteData = deleteHeightAvlTreeWithNodata;
            avlTree->getNodeHeight = getHeightAVLNodeWithNoData;
            avlTree->setNodeHeight = adjustHeightAVLNodeNoData;
            avlTree->deleteNode = deleteNodeAvlNodeWithNoData;
            avlTree->clearNodesBinaryTree =clearANodeAvlTree;
            avlTree->swapValue = swapValueOfAvlTreeNodeWithNoData;
        }
        else
        {
            avlTree->getNodeHeight = getHeightAVLNodeWithData;
            avlTree->setNodeHeight = adjustHeightAVLNode;
            avlTree->swapValue = swapValueOfAvlTreeNodeWithData;
            avlTree->deleteNode = deleteNodeAvlNodeWithData;/* %3 aaa*/
            avlTree->clearNodesBinaryTree =clearANodeAvlTreeWithData;
        }
        avlTree->getKey = getKeyBinaryFn(getDataTypeFromString(KeyTypeConfig));
        avlTree->deleteKey = getDeleteKeyFn(getDataTypeFromString(KeyTypeConfig));
        avlTree->getNodeLeft = getLeftPVoidWithDataNodeBinary;
        avlTree->getNodeRight= getRightPVoidWithDataNodeBinary;
        avlTree->getNodeAddrLeft= getAddrLeftPVoidWithDataNodeBinary;
        avlTree->getNodeAddrRight =getAddrRightPVoidWithDataNodeBinary;
        avlTree->constructNodeDataType = constructPVoidWithDataNodeBinary;
        avlTree->insertFn = insertAvlTreeData;
        avlTree->printTree = printPVoidWithDataInBinaryTree;
        avlTree->compareType = getCompFn(getDataTypeFromString(KeyTypeConfig));
        avlTree->configRight = validateConfigIsOk(avlTree);
    }
    else
    {
        printf("Can not Construct AVL tree\n");
    }
}

/* isWithData==0 , data = height */
void deleteHeightAvlTreeWithNodata(void *data)/* %3 aaa*/
{
    void **p = (void**)data;
    if(data != NULL)
    {
        if(*p!=NULL)
        { 
            free(*p);
            *p =NULL;
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing aaa*/
    }
}

void *getDataFromAvlNode(void *node)/* %3 aaa*/
{
    int res = (node!=NULL);
    nodeBinaryPVoidWithData *p = node;
    void *p2 =NULL;
    if(res==1)
    {
        res = (p->data !=NULL);
        if(res==1)
        {
            p2 = ((avlData*)p->data)->data;
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
    return p2;
}
int setDataToAvlNode(void *node,const void* data)/* %3 aaa*/
{
    int res = (node!=NULL)&&(data!=NULL);
    nodeBinaryPVoidWithData *p = node;
    void **p2 =(void**)data;
    if(res==1)
    {
        res = (p->data !=NULL);
        if(res==1)
        {
            ((avlData*)p->data)->data = *p2;
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
    return res;
}
int getHeightAVLNodeWithData(binaryTree* avlTree,void* node)/* %3 */
{
    int res =-1;
    nodeBinaryPVoidWithData* p =node;
    avlData* avlDataObj=NULL;
    if(node!=NULL)
    {            
        if(p->data!=NULL)
        {
            avlDataObj = p->data;
            res = avlDataObj->height;
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
    return res;
}
int getHeightAVLNodeWithNoData(binaryTree* avlTree,void* node)/* %3 */
{
    int res =-1;
    nodeBinaryPVoidWithData* p =node;
    if(node!=NULL)
    {            
        if(p->data!=NULL)
        {
            res = *((int*)p->data);
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
    return res;
}
int adjustHeightAVLNodeNoData(struct binaryTree* avlTree,void* node)/* %3 */
{
    int* pInt =NULL;
    int res =-1;
    int res2=0;
    int res3=0;
    char fact1 = (avlTree!=NULL);
    nodeBinaryPVoidWithData* p = node;
    if(fact1 ==1)
    {
        if(p!=NULL)
        {
            if(p->data!=NULL)
            {
                pInt = (int*)p->data;
                res2 = avlTree->getNodeHeight(avlTree,avlTree->getNodeLeft(node));
                res3 = avlTree->getNodeHeight(avlTree,avlTree->getNodeRight(node));

                if(res3 > res2)
                {
                    *pInt = res3+1;
                }
                else/* %3 */
                {
                    *pInt = res2+1;
                }
                res = *pInt;
            }
            else
            {
                /* do nothing */
            }
        }
        else
        { 
            /* do nothing */
        }
    }
    return res;
}

int getHeightLL(binaryTree* avlTree,nodeBinaryPVoidWithData* root)
{
    int res =0;
    if((root!=NULL)&&(avlTree!=NULL))
    {
        if(root->left !=NULL)
        {
            if(root->left->left!=NULL)
            {
                res = avlTree->getNodeHeight(avlTree,root->left->left);
            }
            else
            {
                res = -1;
            }
        }
        else
        {
            res = -2;
        }
    }
    else
    {
        res = -3; /* null 3 steps */
    }
    return res;
}
int getHeightLR(binaryTree* avlTree,nodeBinaryPVoidWithData* root)/* %2 aaa */
{
    int res =0;
    if((root!=NULL)&&(avlTree!=NULL))
    {
        if(root->left !=NULL)
        {
            if(root->left->right!=NULL)
            {
                res = avlTree->getNodeHeight(avlTree,root->left->right);
            }
            else
            {
                res = -1;
            }
        }
        else
        {
            res = -2;
        }
    }
    else
    {
        res = -3; /* null 3 steps */
    }
    return res;
}/* %2 aaa*/
int getHeightRR(binaryTree* avlTree,nodeBinaryPVoidWithData* root)
{
    int res =0; 
    if((root!=NULL)&&(avlTree!=NULL))
    { 
        if(root->right !=NULL)
        { 
            if(root->right->right!=NULL)/* %3 */
            {
                res = avlTree->getNodeHeight(avlTree,root->right->right);
            }
            else
            {/* %2 */
                res = -1;
            }
        }
        else
        {
            res = -2;
        }
    }
    else
    {
        res = -3; /* null 3 steps */
    }
    return res;
}
int getHeightRL(binaryTree* avlTree,nodeBinaryPVoidWithData* root)
{
    int res =0;
    if((root!=NULL)&&(avlTree!=NULL))
    {
        if(root->right !=NULL)
        {
            if(root->right->left!=NULL)
            {
                res = avlTree->getNodeHeight(avlTree,root->right->left);
            }
            else
            {
                res = -1;
            }
        }
        else
        {
            res = -2;/* %2 */
        }
    }
    else
    {
        res = -3; /* null 3 steps */
    }
    return res;
}
void* reblanceForRemoveNodeAvlTree(binaryTree* avlTree,nodeBinaryPVoidWithData* root)
{
    void* result=NULL;
    int hAL,hBL,hCL,hAR,hBR,hCR;
    if(root!=NULL)
    {
        hAL = getHeightLL(avlTree,root);
        hAR=getHeightRR(avlTree,root);
        hBL = getHeightLR(avlTree,root);
        hBR=getHeightRL(avlTree,root);
        hCL = avlTree->getNodeHeight(avlTree,root->right);
        hCR=avlTree->getNodeHeight(avlTree,root->left);
        if((hAL >= hBL)&&(hBL>=hCL))
        {
            result = rotate_LL(avlTree,(void**)&root);
        }
        else if((hAR >= hBR)&&(hBR>=hCR))
        { 
            result = rotate_RR(avlTree,(void**)&root);
        }
        else if((hBL >= hAL)&&(hAL>=hCL))
        {
            result = rotate_LR(avlTree,(void**)&root);
        }
        else if((hBR >= hAR)&&(hAR>=hCR))
        {
            result = rotate_RL(avlTree,(void**)&root);/* %2 */
        }
        else
        {/* %3 */
            result = root;
        }
    }
    else
    {
        /* do nothing */
    }
    return result;
}
void* removeNodeForAvlTree(binaryTree *avlTree,void* root)
{
    void *result = NULL;
    nodeBinaryPVoidWithData* r = root;
    nodeBinaryPVoidWithData* child = NULL;
    char fact1 = (r!=NULL);
    if(fact1 == 1)
    { 
        if(r->left == NULL)
        {
            result = r->right;
            avlTree->deleteNode(avlTree,(void**)&r);
        }
        else if(r->right ==NULL)/* %2 */
        {
            result = r->left;
            avlTree->deleteNode(avlTree,(void**)&r);
        }
        else
        {
            child = r->left;
            if(child->right ==NULL)/* %2 */
            {
                avlTree->swapValue(r,child);
                r->left = child->left;
                /* delete child */
                avlTree->deleteNode(avlTree,(void**)&child);
            }
            else/* %3 */
            {
                r = swap_and_remove_left_neighbourForAvlTreeNode(avlTree,r,child);
            }
            avlTree->setNodeHeight(avlTree,r);
            result = reblanceForRemoveNodeAvlTree(avlTree,r);

        } 
    }/* %2 */
    else
    {
        /* do nothing */
    }
    return result;
}
void* swap_and_remove_left_neighbourForAvlTreeNode(binaryTree *avlTree,void* parent,void* chlid)
{
    char fact1 = (avlTree!=NULL)&&(parent!=NULL)&&(chlid!=NULL);
    void *result =NULL;
    void *delNode =NULL;
    nodeBinaryPVoidWithData *chlidNode =(nodeBinaryPVoidWithData*)chlid;
    nodeBinaryPVoidWithData *parentNode =(nodeBinaryPVoidWithData*)parent;
    if(fact1 ==1)
    { 
        fact1 = (chlidNode->right!=NULL);
    }
    else
    {
        /* do nothing */
    }
    if(fact1 ==1)
    {
        if(chlidNode->right->right!=NULL)/* %2 */
        {
            swap_and_remove_left_neighbourForAvlTreeNode(avlTree,parent,chlidNode->right);
        }
        else
        { 
            avlTree->swapValue(parentNode,chlidNode->right);
            delNode = (void*)chlidNode->right;
            chlidNode->right = chlidNode->right->left;
            /* delete old childNpde->right */
            avlTree->deleteNode(avlTree,&delNode);
        }
        avlTree->setNodeHeight(avlTree,chlidNode);
        avlTree->setNodeHeight(avlTree,parent);
        result = reblanceForRemoveNodeAvlTree(avlTree,parent);
    }/* %3 */
    else
    {
        /* do nothing */
    }
    return result;
}

int removeRecForAvlTree(binaryTree *avlTree,void* root,const void *key)/* %2 */
{
    int res =0;
    int resComp =-1;
    nodeBinaryPVoidWithData* r = root;
    char fact1 = ((root!=NULL)&&(avlTree!=NULL)&&(key!=NULL));
    if(fact1==1)
    {
        resComp = avlTree->compareType(r->key,key);
        switch(resComp)
        {/* %2 */
            case MORE_DEFINE:
                if(r->left ==NULL)/* %2 */
                {
                    /* no node to delete */
                    res =0;
                }
                else if( avlTree->compareType(r->left->key,key) ==EQUAL_DEFINE)
                {
                    res =1;
                    r->left = removeNodeForAvlTree(avlTree,r->left);
                }
                else
                {
                    res= removeRecForAvlTree(avlTree,r->left,key);
                    avlTree->setNodeHeight(avlTree,r->left);
                    r->left = reblanceForRemoveNodeAvlTree(avlTree,r->left);
                }
            break;
            case LESS_DEFINE:
                if(r->right ==NULL)
                {
                    /* no node to delete */
                    res =0;
                }
                else if( avlTree->compareType(r->right->key,key) ==EQUAL_DEFINE)
                {
                    res =1;
                    r->right = removeNodeForAvlTree(avlTree,r->right);
                }
                else
                {
                    res= removeRecForAvlTree(avlTree,r->right,key);
                    avlTree->setNodeHeight(avlTree,r->right);
                    r->right = reblanceForRemoveNodeAvlTree(avlTree,r->right);
                }
            break;
        }
    }/* %2 */
    else
    {
        /* do nothing */
    }
    return res;/* %2 */
}
int removeAvlTreeNodeByKey(binaryTree *avlTree,const void *key)
{/* %2 */
    int res =0;
    char fact1 = (avlTree !=NULL)&&(key!=NULL);
    nodeBinaryPVoidWithData *p=NULL;
    if(fact1 ==1)
    {
        fact1 = (avlTree->deleteKey!=NULL)&&(avlTree->deleteData!=NULL)&&(avlTree->compareType!=NULL);
    }
    else
    {
        if(avlTree==NULL)
        {
            printf("avlTree is NULL\n");
        }
        else/* %2 */
        {
            /* do nohting */
        }
        if(key==NULL)
        {
            printf("key is NULL\n");
        }
        else
        {
            /* do nothing */
        }
    }
    if(fact1==1)
    {
        if(avlTree->root == NULL)
        {
            res =0;
        }/* %1 */
        else
        { 
            p =avlTree->root;
            res = avlTree->compareType(p->key,key);
            if(res ==EQUAL_DEFINE)
            { 
                res = 1;
                avlTree->root = removeNodeForAvlTree(avlTree,avlTree->root);

            }
            else
            {
                res = removeRecForAvlTree(avlTree,avlTree->root,key);
            }
            avlTree->setNodeHeight(avlTree,avlTree->root);
            p = avlTree->root;
            avlTree->root= reblanceForRemoveNodeAvlTree(avlTree,avlTree->root);
 
        }
    }
    else/* %1 */
    {
        if(avlTree->compareType==NULL)
        {
            printf("compareType method is NULL\n");
        }
        else
        {
            /* do nohting */
        }
        if(avlTree->deleteData==NULL)
        {
            printf("deleteData method is NULL\n");
        }
        else
        {
            /* do nothing */
        }
        if(avlTree->deleteKey==NULL)
        {
            printf("deleteKey method is NULL\n");
        }/* %1 */
        else
        {
            /* do nothing */
        }
    }
    return res;
}
int adjustHeightAVLNode(struct binaryTree* avlTree,void* node)
{
    int res =-1;
    int res2=0;/* %1 */
    int res3=0;
    char fact1 = (avlTree!=NULL);
    avlData *avlDataObj=NULL;
    nodeBinaryPVoidWithData* p = node;
    if(fact1 ==1)
    {
        if(p!=NULL)
        {/* %1 */
            if(p->data!=NULL)
            {
                res2 = avlTree->getNodeHeight(avlTree,avlTree->getNodeLeft(node));/* %2 */
                res3 = avlTree->getNodeHeight(avlTree,avlTree->getNodeRight(node));
                avlDataObj = p->data;
                if(res3 > res2)
                {
                    avlDataObj->height = res3+1;
                }
                else
                {
                    avlDataObj->height = res2+1;
                }
                res = avlDataObj->height;
            }
            else
            {
                /* do nothing */
            }
        }
        else/* %1 */
        {
            /* do nothing */
        }
    }
    return res;
}

void setDelKeyFnForAvlTree(binaryTree* avlTree,void (*delKey)(void*))
{
    avlTree->deleteKey = delKey;
}
void setDelKeyAndDelDataAndCompFnForAvlTree(binaryTree* avlTree,void (*delKey)(void*),void (*delData)(void*),int (*compareType)(const void*,const void*))
{
    if(avlTree!=NULL)
    {
        if((avlTree->isData==1)&&(delData != NULL))
        {
            avlTree->deleteData = delData;
        }
        else/* %1 */
        {
            /* do nothing */
        }
        if(delKey!=NULL)/* %2 */
        {
            avlTree->deleteKey = delKey;
        }
        else
        {
            /* do nothing */
        }
        if(compareType!=NULL)
        {
            avlTree->compareType = compareType;
        }
        else
        {
            /* do nothing */
        }
        avlTree->configRight = validateConfigIsOk(avlTree);
    }/* %1 */
    else
    {
        /* do nothing */
    }
}
void* insertAvlTreeNoData(binaryTree* avlTree,void** node,const void* key) 
{
    int res =-1;
    void** pKey = (void**)key;
    nodeBinaryPVoidWithData **p = (nodeBinaryPVoidWithData**)node;
    nodeBinaryPVoidWithData *p2 =NULL;
    if(p!=NULL)
    {
        if(*p==NULL)
        {
            *p = (nodeBinaryPVoidWithData*)malloc(sizeof(nodeBinaryPVoidWithData));
            avlTree->constructNodeDataType(*p);
            p2 = *p;
            if(p2 != NULL)
            { 
                p2->key = *pKey; /* %1 */
                p2->data = (int*)malloc(sizeof(int));
                if(p2->data != NULL)
                {
                    *((int*)p2->data)=0; /* height */
                }
                else
                {
                    *p = NULL;
                    free(p2);
                }
            }
            else
            {
                /* do nothing */
            }
        }
        else
        {
            res = avlTree->compareType((*p)->key,*pKey);
            switch(res)/* %1 */
            {
                case MORE_DEFINE:
                    p2 = insertAvlTreeNoData(avlTree,(void**)&((*p)->left),key);
                    res = avlTree->getNodeHeight(avlTree,(*p)->left)- avlTree->getNodeHeight(avlTree,(*p)->right);
                    if((res ==2)&&((*p)->left!=NULL))
                    {
                        res = avlTree->compareType((*p)->left->key,*pKey);
                        switch(res)
                        {
                            case MORE_DEFINE:
                                *p = rotate_LL(avlTree,(void**)p);
                            break;
                            case LESS_DEFINE:
                                *p = rotate_LR(avlTree,(void**)p);
                            break;
                        }
                    }
                    else
                    {
                        /* do nothing */
                    }
                break;
                case LESS_DEFINE:/* %1 */
                    p2 = insertAvlTreeNoData(avlTree,(void**)&((*p)->right),key);
                    res = avlTree->getNodeHeight(avlTree,(*p)->right)- avlTree->getNodeHeight(avlTree,(*p)->left);
                    if((res ==2)&&((*p)->right!=NULL))
                    {
                        res = avlTree->compareType((*p)->right->key,*pKey); 
                        switch(res)
                        {
                            case MORE_DEFINE:
                                *p = rotate_RL(avlTree,(void**)p);
                            break;
                            case LESS_DEFINE:
                                *p = rotate_RR(avlTree,(void**)p);
                            break;
                        }
                    }
                    else
                    {
                        /* do nothing */
                    } 
                break;
                default:
                    res =0;
                    p2=NULL;
                break;/* %1 */
            }
            *((int*)(*p)->data) = avlTree->setNodeHeight(avlTree,*p);
        }
    }
    else
    {
        /* do nothing */
    } 
    return p2;
}
void* insertAvlTreeData2(binaryTree* avlTree,void** node,const void* key)/* %2 */
{
    int res =-1;    
    void** pKey = (void**)key;
    nodeBinaryPVoidWithData **p = (nodeBinaryPVoidWithData**)node;/* %2 */
    nodeBinaryPVoidWithData *p2 =NULL;
    if(p!=NULL)/* %1 */
    {
        if(*p==NULL)
        {
            *p = (nodeBinaryPVoidWithData*)malloc(sizeof(nodeBinaryPVoidWithData));
            avlTree->constructNodeDataType(*p);
            p2 = *p;
            if(p2 != NULL)
            {
                p2->key = *pKey;
                p2->data = (avlData*)malloc(sizeof(avlData));
                if(p2->data != NULL)
                {
                    ((avlData*)(p2->data))->data=NULL;
                    ((avlData*)(p2->data))->height=0;
                }
                else
                {
                    *p = NULL;
                    free(p2);
                }
            }/* %1 */
            else
            {
                /* do nothing */
            }
        }
        else
        {
            res = avlTree->compareType(&((*p)->key),key);
            switch(res)/* %2 */
            {
                case MORE_DEFINE:
                    p2 = insertAvlTreeData2(avlTree,(void**)&((*p)->left),key);/* %2 */
                    res = avlTree->getNodeHeight(avlTree,(*p)->left)- avlTree->getNodeHeight(avlTree,(*p)->right);
                    if((res ==2)&&((*p)->left!=NULL))
                    {
                        res = avlTree->compareType(&((*p)->left->key),key);
                        switch(res)
                        {
                            case MORE_DEFINE:
                                *p = rotate_LL(avlTree,(void**)p);/* %1 */
                            break;
                            case LESS_DEFINE:
                                *p = rotate_LR(avlTree,(void**)p);
                            break;
                        }
                    }
                    else
                    {
                        /* do nothing */
                    }
                break;
                case LESS_DEFINE:
                    p2 = insertAvlTreeData2(avlTree,(void**)&((*p)->right),key);
                    res = avlTree->getNodeHeight(avlTree,(*p)->right)- avlTree->getNodeHeight(avlTree,(*p)->left);
                    if((res ==2)&&((*p)->right!=NULL))
                    {
                        res = avlTree->compareType(&((*p)->right->key),key);
                        switch(res)
                        {
                            case MORE_DEFINE:/* %1 */
                                *p = rotate_RL(avlTree,(void**)p);
                            break;
                            case LESS_DEFINE:
                                *p = rotate_RR(avlTree,(void**)p);
                            break;
                        }
                    }
                    else
                    {
                        /* do nothing */
                    }
                break;
                default:
                    res =0;
                    p2=NULL;
                break;
            }
            ((avlData*)((*p)->data))->height = avlTree->setNodeHeight(avlTree,*p);/* %2 */
        }
    }
    else
    {
        /* do nothing *//* %1 */
    }
    return p2;
}
void* insertAvlTreeData(binaryTree* avlTree,const void* key)
{
    char fact1 = (avlTree != NULL)&&(key!=NULL);
    void* p = NULL;
    if(fact1 == 1)
    {
        fact1 = (avlTree->compareType !=NULL);
    }
    else
    {
        /* do nothing */
    }
    if(fact1 ==1)
    {        
        /* isWithData==0 , data = height */
        if(avlTree->isData==0)
        {  
            p =insertAvlTreeNoData(avlTree,&(avlTree->root),key);
        }
        else/* %2 */
        {
            p =insertAvlTreeData2(avlTree,&(avlTree->root),key);
        }
        if(p!= NULL)
        {
            avlTree->numNode++;
        }
        else
        {
            /* do nothing */
        }
    }
    else
    {
        /* do nothing */
    }
    return p;
}/* %1 */


void* rotate_LL(binaryTree* avlTree,void** node)/* %2 */
{
    nodeBinaryPVoidWithData* p = avlTree->getNodeLeft(*node);
    *(avlTree->getNodeAddrLeft(*node)) = p->right;
    p->right = (nodeBinaryPVoidWithData*)*node;
    /* adjustHeight of node, node.left and p*/
    
    avlTree->setNodeHeight(avlTree,*node);
    avlTree->setNodeHeight(avlTree,avlTree->getNodeLeft(*node));
    avlTree->setNodeHeight(avlTree,p);
    *node = p;
    return *node;
}
void* rotate_RR(binaryTree* avlTree,void** node)
{
    nodeBinaryPVoidWithData* p = avlTree->getNodeRight(*node);
   *(avlTree->getNodeAddrRight(*node)) = p->left;
    p->left = (nodeBinaryPVoidWithData*)*node;
    /* adjustHeight of node, node.right and p*/
    avlTree->setNodeHeight(avlTree,*node);
    avlTree->setNodeHeight(avlTree,avlTree->getNodeRight(*node));
    avlTree->setNodeHeight(avlTree,p);
    *node =p;
    return *node;
}
void* rotate_LR(binaryTree* avlTree,void** node)
{
    nodeBinaryPVoidWithData* leftChild = avlTree->getNodeLeft(*node);
    nodeBinaryPVoidWithData* resultNode = leftChild->right;
    *(avlTree->getNodeAddrLeft(*node)) = resultNode->right;
    leftChild->right = resultNode->left;
    resultNode->right = *node;
    resultNode->left = leftChild;
    /* adjust Height of node,leftChild,resultNode*/
    avlTree->setNodeHeight(avlTree,*node);
    avlTree->setNodeHeight(avlTree,leftChild);
    avlTree->setNodeHeight(avlTree,resultNode);
    return resultNode;
}/* %1 */
void* rotate_RL(binaryTree* avlTree,void** node)
{
    nodeBinaryPVoidWithData* rightChild = avlTree->getNodeRight(*node);
   nodeBinaryPVoidWithData* resultNode = rightChild->left;
   *(avlTree->getNodeAddrRight(*node)) = resultNode->left;
    rightChild->left = resultNode->right;
    resultNode->left = *node;
    resultNode->right = rightChild;
    /* adjust Height of node,rightChild,resultNode*/
    avlTree->setNodeHeight(avlTree,*node);
    avlTree->setNodeHeight(avlTree,rightChild);
    avlTree->setNodeHeight(avlTree,resultNode);
    return resultNode;
}


void swapValueOfAvlTreeNodeWithData(void* node,void* node2)/* %3 */
{
    avlData* avlNode =NULL;
    avlData* avlNode2 =NULL;
    void* tmp2=NULL;
    void* tmp=NULL;
    nodeBinaryPVoidWithData* a= (nodeBinaryPVoidWithData *)node;
    nodeBinaryPVoidWithData* b= (nodeBinaryPVoidWithData*)node2;
    if((node!=NULL)&&(node2!=NULL))
    {
        avlNode = a->data;
        avlNode2 = b->data;
        tmp = a->key;
        a->key = b->key;
        b->key = tmp;
        if((avlNode!=NULL)&&(avlNode2!=NULL))
        {
            tmp2= avlNode->data;
            avlNode->data = avlNode2->data;
            avlNode2->data = tmp2;
        }
        else
        {/* %1 */
            /* do nothing */
        }
    }
    else
    {/* %3 */
        /* do nothing */
    }
}
void swapValueOfAvlTreeNodeWithNoData(void* node,void* node2)
{    /* %3 */
    void* tmp=NULL;
    nodeBinaryPVoidWithData* a= (nodeBinaryPVoidWithData *)node;
    nodeBinaryPVoidWithData* b= (nodeBinaryPVoidWithData*)node2;
    if((node!=NULL)&&(node2!=NULL))/* %2 */
    {
        tmp = a->key;
        a->key = b->key;
        b->key = tmp;
    }/* %1 */
    else
    {
        /* do nohting *//* %3 */
    }
}
