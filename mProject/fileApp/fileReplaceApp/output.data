#include"avlTree.h"
/*ABA*/
intdeleteNodeAvlNodeWithNoData(binaryTree*avlTree,void**node)/*%1{
  intres=0;/*%1  nodeBinaryPVoidWithData**p=(nodeBinaryPVoidWithData**)node;
  charfact1=(avlTree!=NULL)&&(node!=NULL);/*%3  if(fact1==1)
  {
    fact1=(*node!=NULL);
  }
  else
  {
    /*donothing  }
  if(fact1==1)/*%2  {
    if(((*p)->key!=NULL)&&(avlTree->deleteKey!=NULL))/*%1    {
      avlTree->deleteKey(&((*p)->key));
    }
    else
    {
      /*donothing    }
    if(avlTree->deleteData!=NULL)/*%2    {
      avlTree->deleteData(&((*p)->data));
    }
    else
    {
      /*donothing    }
    free(*node);
    res=1;
    *node=NULL;
  }
  else
  {
    /*donothing  }
  returnres;
}
intdeleteNodeAvlNodeWithData(binaryTree*avlTree,void**node)/*%1{
  intres=0;/*%2  charfact1=(avlTree!=NULL)&&(node!=NULL);
  nodeBinaryPVoidWithData**p=(nodeBinaryPVoidWithData**)node;
  if(fact1==1)
  {
    fact1=(*node!=NULL);
  }
  else
  {
    /*donothing  }
  if(fact1==1)
  {
    if(((*p)->key!=NULL)&&(avlTree->deleteKey!=NULL))/*%1    {
      avlTree->deleteKey(&((*p)->key));
    }
    else
    {/*%3      /*donothing    }
    if((avlTree->deleteData!=NULL)&&((*p)->data!=NULL))/*%3    {
      deleteAvlDataStruct(avlTree,*node);
      free((*p)->data);
    }
    else
    {
      /*donothing    }
    free(*node);
    res=1;
    *node=NULL;
  }
  else
  {
    /*donothing  }
  returnres;
}
voidclearANodeAvlTree(binaryTree*avlTree,void*node)
{/*%3  if(node!=NULL)
  { 
    clearANodeAvlTree(avlTree,avlTree->getNodeLeft(node));
    clearANodeAvlTree(avlTree,avlTree->getNodeRight(node));
    deleteNodeAvlNodeWithNoData(avlTree,&node);
  }
  else
  {
    /*donothing  }
}
voidclearANodeAvlTreeWithData(binaryTree*avlTree,void*node)/*%3{
  if(node!=NULL)
  {
    clearANodeAvlTreeWithData(avlTree,avlTree->getNodeLeft(node));
    clearANodeAvlTreeWithData(avlTree,avlTree->getNodeRight(node));
    deleteNodeAvlNodeWithData(avlTree,&node);
  }
  else
  {/*%3    /*donothing  }
}
intvalidateConfigIsOk(binaryTree*avlTree)
{
  intres=(avlTree!=NULL);
  if(res==1)
  {
    res=res&&(avlTree->compareType!=NULL);
  }
  else
  {
    res=0;
  }
  returnres;
}

voiddeleteAvlDataStruct(binaryTree*avlTree,void*node)
{/*%3  charfact1=(avlTree!=NULL)&&(node!=NULL);
  avlData*p=NULL;
  if(fact1==1)
  {
    p=((nodeBinaryPVoidWithData*)node)->data;
    fact1=(p->data!=NULL)&&(avlTree->deleteData!=NULL);
    if(fact1==1)
    {
      avlTree->deleteData(&(p->data));
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
}
voidconstructAvlTree(binaryTree*avlTree,charisWithData,constchar*KeyTypeConfig,intsizeData,intsizeKey)
{/*%3  charfact1=(avlTree!=NULL);
  if(fact1==1)
  {
    constructorBinaryTree3(avlTree,"customtype2",sizeData,sizeKey);
   //setFunctionOfBinaryTree(avlTree);
    avlTree->isData=(isWithData==1);
    /*isWithData==0,data=height*/
    if(avlTree->isData==0)
    {
      avlTree->deleteData=deleteHeightAvlTreeWithNodata;
      avlTree->getNodeHeight=getHeightAVLNodeWithNoData;
      avlTree->setNodeHeight=adjustHeightAVLNodeNoData;
      avlTree->deleteNode=deleteNodeAvlNodeWithNoData;
      avlTree->clearNodesBinaryTree=clearANodeAvlTree;
      avlTree->swapValue=swapValueOfAvlTreeNodeWithNoData;
    }
    else
    {
      avlTree->getNodeHeight=getHeightAVLNodeWithData;
      avlTree->setNodeHeight=adjustHeightAVLNode;
      avlTree->swapValue=swapValueOfAvlTreeNodeWithData;
      avlTree->deleteNode=deleteNodeAvlNodeWithData;/*%3      avlTree->clearNodesBinaryTree=clearANodeAvlTreeWithData;
    }
    avlTree->getKey=getKeyBinaryFn(getDataTypeFromString(KeyTypeConfig));
    avlTree->deleteKey=getDeleteKeyFn(getDataTypeFromString(KeyTypeConfig));
    avlTree->getNodeLeft=getLeftPVoidWithDataNodeBinary;
    avlTree->getNodeRight=getRightPVoidWithDataNodeBinary;
    avlTree->getNodeAddrLeft=getAddrLeftPVoidWithDataNodeBinary;
    avlTree->getNodeAddrRight=getAddrRightPVoidWithDataNodeBinary;
    avlTree->constructNodeDataType=constructPVoidWithDataNodeBinary;
    avlTree->insertFn=insertAvlTreeData;
    avlTree->printTree=printPVoidWithDataInBinaryTree;
    avlTree->compareType=getCompFn(getDataTypeFromString(KeyTypeConfig));
    avlTree->configRight=validateConfigIsOk(avlTree);
  }
  else
  {
    printf("CannotConstructAVLtree\n");
  }
}

/*isWithData==0,data=height*/
voiddeleteHeightAvlTreeWithNodata(void*data)/*%3{
  void**p=(void**)data;
  if(data!=NULL)
  {
    if(*p!=NULL)
    {
      free(*p);
      *p=NULL;
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
}

void*getDataFromAvlNode(void*node)/*%3{
  intres=(node!=NULL);
  nodeBinaryPVoidWithData*p=node;
  void*p2=NULL;
  if(res==1)
  {
    res=(p->data!=NULL);
    if(res==1)
    {
      p2=((avlData*)p->data)->data;
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
  returnp2;
}
intsetDataToAvlNode(void*node,constvoid*data)/*%3{
  intres=(node!=NULL)&&(data!=NULL);
  nodeBinaryPVoidWithData*p=node;
  void**p2=(void**)data;
  if(res==1)
  {
    res=(p->data!=NULL);
    if(res==1)
    {
      ((avlData*)p->data)->data=*p2;
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
  returnres;
}
intgetHeightAVLNodeWithData(binaryTree*avlTree,void*node)/*%3{
  intres=-1;
  nodeBinaryPVoidWithData*p=node;
  avlData*avlDataObj=NULL;
  if(node!=NULL)
  {      
    if(p->data!=NULL)
    {
      avlDataObj=p->data;
      res=avlDataObj->height;
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
  returnres;
}
intgetHeightAVLNodeWithNoData(binaryTree*avlTree,void*node)/*%3{
  intres=-1;
  nodeBinaryPVoidWithData*p=node;
  if(node!=NULL)
  {      
    if(p->data!=NULL)
    {
      res=*((int*)p->data);
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
  returnres;
}
intadjustHeightAVLNodeNoData(structbinaryTree*avlTree,void*node)/*%3{
  int*pInt=NULL;
  intres=-1;
  intres2=0;
  intres3=0;
  charfact1=(avlTree!=NULL);
  nodeBinaryPVoidWithData*p=node;
  if(fact1==1)
  {
    if(p!=NULL)
    {
      if(p->data!=NULL)
      {
        pInt=(int*)p->data;
        res2=avlTree->getNodeHeight(avlTree,avlTree->getNodeLeft(node));
        res3=avlTree->getNodeHeight(avlTree,avlTree->getNodeRight(node));

        if(res3>res2)
        {
          *pInt=res3+1;
        }
        else/*%3        {
          *pInt=res2+1;
        }
        res=*pInt;
      }
      else
      {
        /*donothing      }
    }
    else
    {
      /*donothing    }
  }
  returnres;
}

intgetHeightLL(binaryTree*avlTree,nodeBinaryPVoidWithData*root)
{
  intres=0;
  if((root!=NULL)&&(avlTree!=NULL))
  {
    if(root->left!=NULL)
    {
      if(root->left->left!=NULL)
      {
        res=avlTree->getNodeHeight(avlTree,root->left->left);
      }
      else
      {
        res=-1;
      }
    }
    else
    {
      res=-2;
    }
  }
  else
  {
    res=-3;/*null3steps*/
  }
  returnres;
}
intgetHeightLR(binaryTree*avlTree,nodeBinaryPVoidWithData*root)/*%2{
  intres=0;
  if((root!=NULL)&&(avlTree!=NULL))
  {
    if(root->left!=NULL)
    {
      if(root->left->right!=NULL)
      {
        res=avlTree->getNodeHeight(avlTree,root->left->right);
      }
      else
      {
        res=-1;
      }
    }
    else
    {
      res=-2;
    }
  }
  else
  {
    res=-3;/*null3steps*/
  }
  returnres;
}/*%2intgetHeightRR(binaryTree*avlTree,nodeBinaryPVoidWithData*root)
{
  intres=0;
  if((root!=NULL)&&(avlTree!=NULL))
  {
    if(root->right!=NULL)
    {
      if(root->right->right!=NULL)/*%3      {
        res=avlTree->getNodeHeight(avlTree,root->right->right);
      }
      else
      {/*%2        res=-1;
      }
    }
    else
    {
      res=-2;
    }
  }
  else
  {
    res=-3;/*null3steps*/
  }
  returnres;
}
intgetHeightRL(binaryTree*avlTree,nodeBinaryPVoidWithData*root)
{
  intres=0;
  if((root!=NULL)&&(avlTree!=NULL))
  {
    if(root->right!=NULL)
    {
      if(root->right->left!=NULL)
      {
        res=avlTree->getNodeHeight(avlTree,root->right->left);
      }
      else
      {
        res=-1;
      }
    }
    else
    {
      res=-2;/*%2    }
  }
  else
  {
    res=-3;/*null3steps*/
  }
  returnres;
}
void*reblanceForRemoveNodeAvlTree(binaryTree*avlTree,nodeBinaryPVoidWithData*root)
{
  void*result=NULL;
  inthAL,hBL,hCL,hAR,hBR,hCR;
  if(root!=NULL)
  {
    hAL=getHeightLL(avlTree,root);
    hAR=getHeightRR(avlTree,root);
    hBL=getHeightLR(avlTree,root);
    hBR=getHeightRL(avlTree,root);
    hCL=avlTree->getNodeHeight(avlTree,root->right);
    hCR=avlTree->getNodeHeight(avlTree,root->left);
    if((hAL>=hBL)&&(hBL>=hCL))
    {
      result=rotate_LL(avlTree,(void**)&root);
    }
    elseif((hAR>=hBR)&&(hBR>=hCR))
    {
      result=rotate_RR(avlTree,(void**)&root);
    }
    elseif((hBL>=hAL)&&(hAL>=hCL))
    {
      result=rotate_LR(avlTree,(void**)&root);
    }
    elseif((hBR>=hAR)&&(hAR>=hCR))
    {
      result=rotate_RL(avlTree,(void**)&root);/*%2    }
    else
    {/*%3      result=root;
    }
  }
  else
  {
    /*donothing  }
  returnresult;
}
void*removeNodeForAvlTree(binaryTree*avlTree,void*root)
{
  void*result=NULL;
  nodeBinaryPVoidWithData*r=root;
  nodeBinaryPVoidWithData*child=NULL;
  charfact1=(r!=NULL);
  if(fact1==1)
  {
    if(r->left==NULL)
    {
      result=r->right;
      avlTree->deleteNode(avlTree,(void**)&r);
    }
    elseif(r->right==NULL)/*%2    {
      result=r->left;
      avlTree->deleteNode(avlTree,(void**)&r);
    }
    else
    {
      child=r->left;
      if(child->right==NULL)/*%2      {
        avlTree->swapValue(r,child);
        r->left=child->left;
        /*deletechild*/
        avlTree->deleteNode(avlTree,(void**)&child);
      }
      else/*%3      {
        r=swap_and_remove_left_neighbourForAvlTreeNode(avlTree,r,child);
      }
      avlTree->setNodeHeight(avlTree,r);
      result=reblanceForRemoveNodeAvlTree(avlTree,r);

    }
  }/*%2  else
  {
    /*donothing  }
  returnresult;
}
void*swap_and_remove_left_neighbourForAvlTreeNode(binaryTree*avlTree,void*parent,void*chlid)
{
  charfact1=(avlTree!=NULL)&&(parent!=NULL)&&(chlid!=NULL);
  void*result=NULL;
  void*delNode=NULL;
  nodeBinaryPVoidWithData*chlidNode=(nodeBinaryPVoidWithData*)chlid;
  nodeBinaryPVoidWithData*parentNode=(nodeBinaryPVoidWithData*)parent;
  if(fact1==1)
  {
    fact1=(chlidNode->right!=NULL);
  }
  else
  {
    /*donothing  }
  if(fact1==1)
  {
    if(chlidNode->right->right!=NULL)/*%2    {
      swap_and_remove_left_neighbourForAvlTreeNode(avlTree,parent,chlidNode->right);
    }
    else
    {
      avlTree->swapValue(parentNode,chlidNode->right);
      delNode=(void*)chlidNode->right;
      chlidNode->right=chlidNode->right->left;
      /*deleteoldchildNpde->right*/
      avlTree->deleteNode(avlTree,&delNode);
    }
    avlTree->setNodeHeight(avlTree,chlidNode);
    avlTree->setNodeHeight(avlTree,parent);
    result=reblanceForRemoveNodeAvlTree(avlTree,parent);
  }/*%3  else
  {
    /*donothing  }
  returnresult;
}

intremoveRecForAvlTree(binaryTree*avlTree,void*root,constvoid*key)/*%2{
  intres=0;
  intresComp=-1;
  nodeBinaryPVoidWithData*r=root;
  charfact1=((root!=NULL)&&(avlTree!=NULL)&&(key!=NULL));
  if(fact1==1)
  {
    resComp=avlTree->compareType(r->key,key);
    switch(resComp)
    {/*%2      caseMORE_DEFINE:
        if(r->left==NULL)/*%2        {
          /*nonodetodelete*/
          res=0;
        }
        elseif(avlTree->compareType(r->left->key,key)==EQUAL_DEFINE)
        {
          res=1;
          r->left=removeNodeForAvlTree(avlTree,r->left);
        }
        else
        {
          res=removeRecForAvlTree(avlTree,r->left,key);
          avlTree->setNodeHeight(avlTree,r->left);
          r->left=reblanceForRemoveNodeAvlTree(avlTree,r->left);
        }
      break;
      caseLESS_DEFINE:
        if(r->right==NULL)
        {
          /*nonodetodelete*/
          res=0;
        }
        elseif(avlTree->compareType(r->right->key,key)==EQUAL_DEFINE)
        {
          res=1;
          r->right=removeNodeForAvlTree(avlTree,r->right);
        }
        else
        {
          res=removeRecForAvlTree(avlTree,r->right,key);
          avlTree->setNodeHeight(avlTree,r->right);
          r->right=reblanceForRemoveNodeAvlTree(avlTree,r->right);
        }
      break;
    }
  }/*%2  else
  {
    /*donothing  }
  returnres;/*%2}
intremoveAvlTreeNodeByKey(binaryTree*avlTree,constvoid*key)
{/*%2  intres=0;
  charfact1=(avlTree!=NULL)&&(key!=NULL);
  nodeBinaryPVoidWithData*p=NULL;
  if(fact1==1)
  {
    fact1=(avlTree->deleteKey!=NULL)&&(avlTree->deleteData!=NULL)&&(avlTree->compareType!=NULL);
  }
  else
  {
    if(avlTree==NULL)
    {
      printf("avlTreeisNULL\n");
    }
    else/*%2    {
      /*donohting*/
    }
    if(key==NULL)
    {
      printf("keyisNULL\n");
    }
    else
    {
      /*donothing    }
  }
  if(fact1==1)
  {
    if(avlTree->root==NULL)
    {
      res=0;
    }/*%1    else
    {
      p=avlTree->root;
      res=avlTree->compareType(p->key,key);
      if(res==EQUAL_DEFINE)
      {
        res=1;
        avlTree->root=removeNodeForAvlTree(avlTree,avlTree->root);

      }
      else
      {
        res=removeRecForAvlTree(avlTree,avlTree->root,key);
      }
      avlTree->setNodeHeight(avlTree,avlTree->root);
      p=avlTree->root;
      avlTree->root=reblanceForRemoveNodeAvlTree(avlTree,avlTree->root);

    }
  }
  else/*%1  {
    if(avlTree->compareType==NULL)
    {
      printf("compareTypemethodisNULL\n");
    }
    else
    {
      /*donohting*/
    }
    if(avlTree->deleteData==NULL)
    {
      printf("deleteDatamethodisNULL\n");
    }
    else
    {
      /*donothing    }
    if(avlTree->deleteKey==NULL)
    {
      printf("deleteKeymethodisNULL\n");
    }/*%1    else
    {
      /*donothing    }
  }
  returnres;
}
intadjustHeightAVLNode(structbinaryTree*avlTree,void*node)
{
  intres=-1;
  intres2=0;/*%1  intres3=0;
  charfact1=(avlTree!=NULL);
  avlData*avlDataObj=NULL;
  nodeBinaryPVoidWithData*p=node;
  if(fact1==1)
  {
    if(p!=NULL)
    {/*%1      if(p->data!=NULL)
      {
        res2=avlTree->getNodeHeight(avlTree,avlTree->getNodeLeft(node));/*%2        res3=avlTree->getNodeHeight(avlTree,avlTree->getNodeRight(node));
        avlDataObj=p->data;
        if(res3>res2)
        {
          avlDataObj->height=res3+1;
        }
        else
        {
          avlDataObj->height=res2+1;
        }
        res=avlDataObj->height;
      }
      else
      {
        /*donothing      }
    }
    else/*%1    {
      /*donothing    }
  }
  returnres;
}

voidsetDelKeyFnForAvlTree(binaryTree*avlTree,void(*delKey)(void*))
{
  avlTree->deleteKey=delKey;
}
voidsetDelKeyAndDelDataAndCompFnForAvlTree(binaryTree*avlTree,void(*delKey)(void*),void(*delData)(void*),int(*compareType)(constvoid*,constvoid*))
{
  if(avlTree!=NULL)
  {
    if((avlTree->isData==1)&&(delData!=NULL))
    {
      avlTree->deleteData=delData;
    }
    else/*%1    {
      /*donothing    }
    if(delKey!=NULL)/*%2    {
      avlTree->deleteKey=delKey;
    }
    else
    {
      /*donothing    }
    if(compareType!=NULL)
    {
      avlTree->compareType=compareType;
    }
    else
    {
      /*donothing    }
    avlTree->configRight=validateConfigIsOk(avlTree);
  }/*%1  else
  {
    /*donothing  }
}
void*insertAvlTreeNoData(binaryTree*avlTree,void**node,constvoid*key)
{
  intres=-1;
  void**pKey=(void**)key;
  nodeBinaryPVoidWithData**p=(nodeBinaryPVoidWithData**)node;
  nodeBinaryPVoidWithData*p2=NULL;
  if(p!=NULL)
  {
    if(*p==NULL)
    {
      *p=(nodeBinaryPVoidWithData*)malloc(sizeof(nodeBinaryPVoidWithData));
      avlTree->constructNodeDataType(*p);
      p2=*p;
      if(p2!=NULL)
      {
        p2->key=*pKey;/*%1        p2->data=(int*)malloc(sizeof(int));
        if(p2->data!=NULL)
        {
          *((int*)p2->data)=0;/*height*/
        }
        else
        {
          *p=NULL;
          free(p2);
        }
      }
      else
      {
        /*donothing      }
    }
    else
    {
      res=avlTree->compareType((*p)->key,*pKey);
      switch(res)/*%1      {
        caseMORE_DEFINE:
          p2=insertAvlTreeNoData(avlTree,(void**)&((*p)->left),key);
          res=avlTree->getNodeHeight(avlTree,(*p)->left)-avlTree->getNodeHeight(avlTree,(*p)->right);
          if((res==2)&&((*p)->left!=NULL))
          {
            res=avlTree->compareType((*p)->left->key,*pKey);
            switch(res)
            {
              caseMORE_DEFINE:
                *p=rotate_LL(avlTree,(void**)p);
              break;
              caseLESS_DEFINE:
                *p=rotate_LR(avlTree,(void**)p);
              break;
            }
          }
          else
          {
            /*donothing          }
        break;
        caseLESS_DEFINE:/*%1          p2=insertAvlTreeNoData(avlTree,(void**)&((*p)->right),key);
          res=avlTree->getNodeHeight(avlTree,(*p)->right)-avlTree->getNodeHeight(avlTree,(*p)->left);
          if((res==2)&&((*p)->right!=NULL))
          {
            res=avlTree->compareType((*p)->right->key,*pKey);
            switch(res)
            {
              caseMORE_DEFINE:
                *p=rotate_RL(avlTree,(void**)p);
              break;
              caseLESS_DEFINE:
                *p=rotate_RR(avlTree,(void**)p);
              break;
            }
          }
          else
          {
            /*donothing          }
        break;
        default:
          res=0;
          p2=NULL;
        break;/*%1      }
      *((int*)(*p)->data)=avlTree->setNodeHeight(avlTree,*p);
    }
  }
  else
  {
    /*donothing  }
  returnp2;
}
void*insertAvlTreeData2(binaryTree*avlTree,void**node,constvoid*key)/*%2{
  intres=-1;  
  void**pKey=(void**)key;
  nodeBinaryPVoidWithData**p=(nodeBinaryPVoidWithData**)node;/*%2  nodeBinaryPVoidWithData*p2=NULL;
  if(p!=NULL)/*%1  {
    if(*p==NULL)
    {
      *p=(nodeBinaryPVoidWithData*)malloc(sizeof(nodeBinaryPVoidWithData));
      avlTree->constructNodeDataType(*p);
      p2=*p;
      if(p2!=NULL)
      {
        p2->key=*pKey;
        p2->data=(avlData*)malloc(sizeof(avlData));
        if(p2->data!=NULL)
        {
          ((avlData*)(p2->data))->data=NULL;
          ((avlData*)(p2->data))->height=0;
        }
        else
        {
          *p=NULL;
          free(p2);
        }
      }/*%1      else
      {
        /*donothing      }
    }
    else
    {
      res=avlTree->compareType(&((*p)->key),key);
      switch(res)/*%2      {
        caseMORE_DEFINE:
          p2=insertAvlTreeData2(avlTree,(void**)&((*p)->left),key);/*%2          res=avlTree->getNodeHeight(avlTree,(*p)->left)-avlTree->getNodeHeight(avlTree,(*p)->right);
          if((res==2)&&((*p)->left!=NULL))
          {
            res=avlTree->compareType(&((*p)->left->key),key);
            switch(res)
            {
              caseMORE_DEFINE:
                *p=rotate_LL(avlTree,(void**)p);/*%1              break;
              caseLESS_DEFINE:
                *p=rotate_LR(avlTree,(void**)p);
              break;
            }
          }
          else
          {
            /*donothing          }
        break;
        caseLESS_DEFINE:
          p2=insertAvlTreeData2(avlTree,(void**)&((*p)->right),key);
          res=avlTree->getNodeHeight(avlTree,(*p)->right)-avlTree->getNodeHeight(avlTree,(*p)->left);
          if((res==2)&&((*p)->right!=NULL))
          {
            res=avlTree->compareType(&((*p)->right->key),key);
            switch(res)
            {
              caseMORE_DEFINE:/*%1                *p=rotate_RL(avlTree,(void**)p);
              break;
              caseLESS_DEFINE:
                *p=rotate_RR(avlTree,(void**)p);
              break;
            }
          }
          else
          {
            /*donothing          }
        break;
        default:
          res=0;
          p2=NULL;
        break;
      }
      ((avlData*)((*p)->data))->height=avlTree->setNodeHeight(avlTree,*p);/*%2    }
  }
  else
  {
    /*donothing  }
  returnp2;
}
void*insertAvlTreeData(binaryTree*avlTree,constvoid*key)
{
  charfact1=(avlTree!=NULL)&&(key!=NULL);
  void*p=NULL;
  if(fact1==1)
  {
    fact1=(avlTree->compareType!=NULL);
  }
  else
  {
    /*donothing  }
  if(fact1==1)
  {    
    /*isWithData==0,data=height*/
    if(avlTree->isData==0)
    { 
      p=insertAvlTreeNoData(avlTree,&(avlTree->root),key);
    }
    else/*%2    {
      p=insertAvlTreeData2(avlTree,&(avlTree->root),key);
    }
    if(p!=NULL)
    {
      avlTree->numNode++;
    }
    else
    {
      /*donothing    }
  }
  else
  {
    /*donothing  }
  returnp;
}/*%1

void*rotate_LL(binaryTree*avlTree,void**node)/*%2{
  nodeBinaryPVoidWithData*p=avlTree->getNodeLeft(*node);
  *(avlTree->getNodeAddrLeft(*node))=p->right;
  p->right=(nodeBinaryPVoidWithData*)*node;
  /*adjustHeightofnode,node.leftandp*/
  
  avlTree->setNodeHeight(avlTree,*node);
  avlTree->setNodeHeight(avlTree,avlTree->getNodeLeft(*node));
  avlTree->setNodeHeight(avlTree,p);
  *node=p;
  return*node;
}
void*rotate_RR(binaryTree*avlTree,void**node)
{
  nodeBinaryPVoidWithData*p=avlTree->getNodeRight(*node);
 *(avlTree->getNodeAddrRight(*node))=p->left;
  p->left=(nodeBinaryPVoidWithData*)*node;
  /*adjustHeightofnode,node.rightandp*/
  avlTree->setNodeHeight(avlTree,*node);
  avlTree->setNodeHeight(avlTree,avlTree->getNodeRight(*node));
  avlTree->setNodeHeight(avlTree,p);
  *node=p;
  return*node;
}
void*rotate_LR(binaryTree*avlTree,void**node)
{
  nodeBinaryPVoidWithData*leftChild=avlTree->getNodeLeft(*node);
  nodeBinaryPVoidWithData*resultNode=leftChild->right;
  *(avlTree->getNodeAddrLeft(*node))=resultNode->right;
  leftChild->right=resultNode->left;
  resultNode->right=*node;
  resultNode->left=leftChild;
  /*adjustHeightofnode,leftChild,resultNode*/
  avlTree->setNodeHeight(avlTree,*node);
  avlTree->setNodeHeight(avlTree,leftChild);
  avlTree->setNodeHeight(avlTree,resultNode);
  returnresultNode;
}/*%1void*rotate_RL(binaryTree*avlTree,void**node)
{
  nodeBinaryPVoidWithData*rightChild=avlTree->getNodeRight(*node);
 nodeBinaryPVoidWithData*resultNode=rightChild->left;
 *(avlTree->getNodeAddrRight(*node))=resultNode->left;
  rightChild->left=resultNode->right;
  resultNode->left=*node;
  resultNode->right=rightChild;
  /*adjustHeightofnode,rightChild,resultNode*/
  avlTree->setNodeHeight(avlTree,*node);
  avlTree->setNodeHeight(avlTree,rightChild);
  avlTree->setNodeHeight(avlTree,resultNode);
  returnresultNode;
}


voidswapValueOfAvlTreeNodeWithData(void*node,void*node2)/*%3{
  avlData*avlNode=NULL;
  avlData*avlNode2=NULL;
  void*tmp2=NULL;
  void*tmp=NULL;
  nodeBinaryPVoidWithData*a=(nodeBinaryPVoidWithData*)node;
  nodeBinaryPVoidWithData*b=(nodeBinaryPVoidWithData*)node2;
  if((node!=NULL)&&(node2!=NULL))
  {
    avlNode=a->data;
    avlNode2=b->data;
    tmp=a->key;
    a->key=b->key;
    b->key=tmp;
    if((avlNode!=NULL)&&(avlNode2!=NULL))
    {
      tmp2=avlNode->data;
      avlNode->data=avlNode2->data;
      avlNode2->data=tmp2;
    }
    else
    {/*%1      /*donothing    }
  }
  else
  {/*%3    /*donothing  }
}
voidswapValueOfAvlTreeNodeWithNoData(void*node,void*node2)
{  /*%3  void*tmp=NULL;
  nodeBinaryPVoidWithData*a=(nodeBinaryPVoidWithData*)node;
  nodeBinaryPVoidWithData*b=(nodeBinaryPVoidWithData*)node2;
  if((node!=NULL)&&(node2!=NULL))/*%2  {
    tmp=a->key;
    a->key=b->key;
    b->key=tmp;
  }/*%1  else
  {
    /*donohting*//*%3  }
}
